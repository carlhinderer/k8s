-----------------------------------------------------------------------------
| CHAPTER 11 - DAEMONSETS                                                   |
-----------------------------------------------------------------------------

- DaemonSets

    - Sometimes, we want a single instance of a Pod to run on every node in the cluster.  Usually, this is
        to put some kind of agent or daemon on each node.  The 'DaemonSet' is the K8s object for doing this.


    - A 'DaemonSet' ensures one copy of a Pod is running on each node in the cluster.  They are often used
        to deploy system daemons like log collectors and monitoring agents.  They are similar to 
        ReplicaSets in the way they ensure desired state.


    - You can use labels to run DaemonSet Pods on specific nodes.  For instance, you may want to run
        network intrusion-detection software on nodes that are exposed to the edge network.


    - DaemonSets can be used to install software on nodes.  For instance, they could be used to update
        RPM/DEB packages on every host OS.



- DaemonSet Scheduler

    - Like ReplicaSets, DaemonSets are managed by a reconciliation control loop that measures the desired
        state with the observed states.  Given this information, the DaemonSet controller creates a Pod on
        each node that doesn't currently have a matching Pod.


    - If a new node is added to the cluster, the DaemonSet Controller notices it is missing a Pod and adds
        a Pod to the node.



- Creating DaemonSets

    - Here, we'll add a 'fluentd' logging agent on every node in the target cluster.

        # fluentd.yaml
        ---------------------------
        apiVersion: apps/v1
        kind: DaemonSet
        metadata:
          name: fluentd
          labels:
            app: fluentd
        spec:
          selector:
            matchLabels:
              app: fluentd
          template:
            metadata:
              labels:
                app: fluentd
            spec:
              containers:
              - name: fluentd
                image: fluent/fluentd:v0.14.10
                resources:
                  limits:
                    memory: 200Mi
                  requests:
                    cpu: 100m
                    memory: 200Mi
                volumeMounts:
                - name: varlog
                  mountPath: /var/log
                - name: varlibdockercontainers
                  mountPath: /var/lib/docker/containers
                  readOnly: true
              terminationGracePeriodSeconds: 30
              volumes:
                - name: varlog
                  hostPath:
                    path: /var/log
                - name: varlibdockercontainers
                  hostPath:
                    path: /var/lib/docker/containers


    - DaemonSets require a unique name in a given namespace.  Each DaemonSet must have a Pod template spec.
        To create a DaemonSet:

        $ kubectl apply -f fluentd.yaml


    - To see the current state:

        $ kubectl describe daemonset fluentd


    - To see the Pods:

        $ kubectl get pods -l app=fluentd -o wide



- Limiting DaemonSets to Specific Nodes

    - Sometimes, you may want to only deploy a pod to a subset of nodes.  For example, maybe you have a
        GPU or access to fast storage only on a subset of nodes.


    - First, we'll add a label 'ssl=true' to a single node.

        $ kubectl label nodes k0-default-pool-35609c18-z7tb ssd=true


    - To see the nodes with a specified label:

        $ kubectl get nodes --selector ssd=true


    - Now, we can limit NGINX to only run on nodes with the 'ssd=true' label set.

        apiVersion: apps/v1
        kind: "DaemonSet"
        metadata:
          labels:
            app: nginx
            ssd: "true"
          name: nginx-fast-storage
        spec:
          selector:
            matchLabels:
              app: nginx
              ssd: "true"
          template:
            metadata:
              labels:
                app: nginx
                ssd: "true"
            spec:
              nodeSelector:
                ssd: "true"
              containers:
                - name: nginx
                  image: nginx:1.10.0


    - Now we can submit our DaemonSet to the K8s API:

        $ kubectl apply -f nginx-fast-storage.yaml


    - And we can verify that NGINX is only running on that one node:

        $ kubectl get pods -l app=nginx -o wide



- Updating a DaemonSet

    - DaemonSets can be rolled out using the same 'RollingUpdate' strategy that Deployments use.  You can
        configure the update strategy using the 'spec.update.Strategy.type' field.


    - As with rolling updates of Deployments, the RollingUpdate strategy gradually updates Pods until all
        are running the new version.  There are 2 parameters that control the rolling update of a 
        DaemonSet:

        spec.minReadySeconds = Determines how long a Pod must be ready before the update proceeds to 
                                 subsequent Pods

        spec.updateStrategy.rollingUpdate.maxUnavailable = How many Pods may be simultaneously updated


    - To view the status of a rollout:

        $ kubectl rollout status daemonSets my-daemon-set



- Deleting a DaemonSet

    - To delete a DaemonSet:

        $ kubectl delete -f fluentd.yaml