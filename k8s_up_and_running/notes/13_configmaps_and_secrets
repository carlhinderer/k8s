-----------------------------------------------------------------------------
| CHAPTER 13 - CONFIGMAPS & SECRETS                                         |
-----------------------------------------------------------------------------

- ConfigMaps

    - It's a good idea to make container images as reusable as possible.  The same image should be able to
        be used for development, staging, and production.  Testing and versioning are more risky if images
        need to be recreated for each environment.


    - 'ConfigMaps' are used to provide configuration information for workloads.  This can either be strings
        or a composite value like a file.


    - 'Secrets' are similar to ConfigMaps, but focus on making sensitive information like credentials or
        TLS certificates available to the workload.


    - One way to think of a ConfigMap is as a K8s object that defines a small filesystem with environment
        variables.  The ConfigMap is combined with the Pod right before it is run.  This means that the
        Pod definition can be used by different workloads just by changing the ConfigMap.



- Creating ConfigMaps

    - We'll start by creating a ConfigMap imperatively.  Let's assume we have a file on disk, 'my-config.txt',
        that we want to make available to a Pod.

        my-config.txt
        --------------------
        parameter1 = value1
        parameter2 = value2


    - Now, we'll create a ConfigMap using the file.  We'll also add a couple key/value literals.

        $ kubectl create configmap my-config \
                                   --from-file=my-config.txt \
                                   --from-literal=extra-param=extra-value \
                                   --from-literal=another-param=another-value


    - To see the equivalent YAML:

        $ kubectl get configmaps my-config -o yaml



- Using a ConfigMap

    - There are 3 main ways to use a ConfigMap:

        1. Filesystem

             You can mount a ConfigMap into a Pod.  A file is created for each entry based on the key name.
               The contents of the file are set to the value.

        2. Environment Variable

             A ConfigMap can be used to dynamically set the value of an environment variable.

        3. Command-line Argument

             You can dynamically create the command line for a container based on ConfigMap values.


    - We'll create a manifest for kuard that pulls all of these together:

        kuard-config.yaml
        ------------------------
        apiVersion: v1
        kind: Pod
        metadata:
          name: kuard-config
        spec:
          containers:
            - name: test-container
              image: gcr.io/kuar-demo/kuard-amd64:blue
              imagePullPolicy: Always
              command:
                - "/kuard"
                - "$(EXTRA_PARAM)"
              env:
                # An example of an environment variable used inside the container
                - name: ANOTHER_PARAM
                  valueFrom:
                    configMapKeyRef:
                      name: my-config
                      key: another-param
                # An example of an environment variable passed to the command to start
                # the container (above).
                - name: EXTRA_PARAM
                  valueFrom:
                    configMapKeyRef:
                      name: my-config
                      key: extra-param
               volumeMounts:
                 # Mounting the ConfigMap as a set of files
                 - name: config-volume
                   mountPath: /config
          volumes:
            - name: config-volume
              configMap:
                name: my-config
          restartPolicy: Never


    - Now we can run this pod:

        $ kubectl apply -f kuard-config.yaml
        $ kubectl port-forward kuard-config 8080


    - And we can navigate to http://localhost:8080, click the 'Server Env' tab, and we'll see our
        configuration variables.  We can look into the 'File system browser' for our file.



- Secrets

    - Sensitive data, like passwords, security tokens, or private keys are stored in K8s 'Secrets', which
        enable container images to be created without bundling sensitive data.


    - Secrets are exposed to Pods via explicit declaration in Pod manifests and the K8s API.


    - By default, K8s Secrets are stored in plain text in the etcd storage for the cluster.  This may not
        be sufficient security, since anyone with 'Cluster Administrator' rights will be able to see them.

      In recent versions of K8s, support has been added for encrypting the secrets with a user-supplied
        key, generally integrated into a cloud key store.  In addition, most cloud providers have 
        integrations that allow you to read directly from the cloud provider's key store.



- Creating Secrets

    - First, we'll download a TLS key and certificate.

        $ curl -o kuard.crt https://storage.googleapis.com/kuar-demo/kuard.crt
        $ curl -o kuard.key https://storage.googleapis.com/kuar-demo/kuard.key


    - Now, we can create a secret using these files:

        $ kubectl create secret generic kuard-tls \
                                        --from-file=kuard.crt \
                                        --from-file=kuard.key

        # View the Secret
        $ kubectl describe secrets kuard-tls



- Consuming Secrets

    - Secrets can be consumed by the K8s REST API by applications that know how to call it.  However, we
        want to make reading secrets as portable as possible, so we'll create a 'Secrets volume'.


    - Secrets volumes are managed by the kubelet and created at Pod creation time.  They are stored on
        'tmpfs' volumes (aka RAM disks), so they're not written to disk on nodes.


    - Each data element of a Secret is stored in a separate file under the target mount point specifed in
         the volume mount.  Our Secret will have 2 files:

         /tls/kuard.crt
         /tls/kuard.key


    - This Pod manifest demonstrates how to declare a Secrets volume:

        kuard-secret.yaml
        ------------------------
        apiVersion: v1
        kind: Pod
        metadata:
          name: kuard-tls
        spec:
          containers:
            - name: kuard-tls
              image: gcr.io/kuar-demo/kuard-amd64:blue
              imagePullPolicy: Always
              volumeMounts:
              - name: tls-certs
                mountPath: "/tls"
                readOnly: true
          volumes:
            - name: tls-certs
              secret:
                secretName: kuard-tls


    - Now, we can create the create the Pod and observe the log output from the running Pod:

        $ kubectl apply -f kuard-secret.yaml
        $ kubectl port-forward kuard-tls 8443:8443


    - Now, we can navigate to http://localhost:8443, and we'll see the kuard server hosted via HTTPS.



- Private Container Registries

    - A special use case for Secrets is to store access credentials for private container registries.  K8s
        supports using images stored on private registries, but access to those images requires 
        credentials.


    - 'Image pull Secrets' leverage the Secrets API to automate the distribution of private registry
        credentials.  They're stored just like Secrets, but are consumed throuth the 'spec.imagePullSecrets'
        Pod spec field.


    - To create this special kind of Secret:

         kubectl create secret docker-registry my-image-pull-secret \
                                               --docker-username=<username> \
                                               --docker-password=<password> \
                                               --docker-email=<email-address>


    - To enable access to the image pull secret:

        apiVersion: v1
        kind: Pod
        metadata:
          name: kuard-tls
        spec:
          containers:
            - name: kuard-tls
              image: gcr.io/kuar-demo/kuard-amd64:blue
              imagePullPolicy: Always
              volumeMounts:
              - name: tls-certs
                mountPath: "/tls"
                readOnly: true
          imagePullSecrets:
          - name: my-image-pull-secret
          volumes:
            - name: tls-certs
              secret:
                secretName: kuard-tls



- Naming Constraints

    - The key names for data items inside of a Secret or ConfigMap are defined to map to valid environment
        variable names.  They may begin with a dot, followed by a letter or number, then followed by
        characters including dots, dashes, and underscores.

        Valid Names
        ------------
        .auth_token
        Key.pem
        config_file

        Invalid Names
        -----------
        Token..properties
        auth file.json
        _password.txt



- Managing ConfigMaps and Secrets

    - To list ConfigMaps and Secrets

        # List all Secrets
        $ kubectl get secrets

        # List all ConfigMaps in a namespace
        $ kubectl describe configmap my-config

        # Get more details on a single object
        $ kubectl describe configmap my-config


    - To Create ConfigMaps and Secrets

        $ kubectl create secret generic
        $ kubectl create configmap

        # Load from the file with the Secret data key thatâ€™s the same as the filename.
        --from-file=<filename>

        # Load from the file with the Secret data key explicitly specified.        
        --from-file=<key>=<filename>

        # Load all the files in the specified directory where the filename is an acceptable key name.
        --from-file=<directory>

        # Use the specified key/value pair directly.
        --from-literal=<key>=<value>


    - To update a ConfigMap or a Secret from a file, we can update the file and replace it.

        # Replace file with new version
        $ kubectl replace -f <filename>

        # Update with 'apply' if we previously created the resource with 'apply'
        $ kubectl apply -f <filename>


    - If you store the inputs into your ConfigMaps or Secrets as separate files on disk (as opposed to 
        embedded into YAML directly), you can use kubectl to re-create the manifest and then use it to 
        update the object.

        $ kubectl create secret generic kuard-tls \
                                        --from-file=kuard.crt --from-file=kuard.key \
                                        --dry-run -o yaml | kubectl replace -f -


    - We can edit the ConfigMap manually using the editor:

        $ kubectl edit configmap my-config


    - Once a ConfigMap or secret is updated using the API, it will be automatically pushed to all volumes
        that use that ConfigMap or secret.